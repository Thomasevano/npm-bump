#!/usr/bin/env bash 

declare -a updated_packages
declare -a old_version_packages
declare -a new_version_packages
declare -a no_updated_packages

outdated_packages=$(npm outdated | tail -n +2)

function commit_bump {
    git add package.json package-lock.json && git commit -m "Bump ${1} from ${2} to ${3}"
}

function undo_changes {
    git checkout package.json package-lock.json
    npm install
}

function add_updated_package_informations {
    updated_packages+=($1)
    old_version_packages+=($2)
    new_version_packages+=($3)
}

while read package actual_version coll3 latest_version col5
do 
    echo "Try to bump ${package} from ${actual_version} to ${latest_version}"
    npm install $package@$latest_version && npm test 

    if [ $? -eq 0 ]; then
        commit_bump $package $actual_version $latest_version
        add_updated_package_informations $package $actual_version $latest_version
    else
        no_updated_packages+=(${package})
        undo_changes
    fi
    
done <<< "$outdated_packages"

if [ ${#updated_packages[@]} -eq 0 ]; then
    printf "\n\n%s\n" "No package updated"
else
    printf "\n\n%s\n" "Updated packages :"
    printf "\n%-15s %9s    %9s\n" "Package" "Old" "New"
    printf "%.0s-" {1..38}
    printf "\n"

    for index in ${!updated_packages[*]}
    do
        printf "%-15s %9s    %9s\n" ${updated_packages[$index]} ${old_version_packages[$index]} ${new_version_packages[$index]}
    done

fi

printf "\n"

if [ ${#no_updated_packages[@]} -gt 0 ]; then
    printf "\n%s\n" "Packages not updated :"
    for package in ${no_updated_packages[*]}
    do
        printf "%s %s\n" "-" $package
    done
fi