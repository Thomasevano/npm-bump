#!/usr/bin/env bash

declare -a updated_packages
declare -a old_version_packages
declare -a new_version_packages
declare -a no_updated_packages
command=""
no_test=0
markdown=0
step_by_step=0

trap ctrl_c SIGINT

function ctrl_c() {
  git checkout .
  show_result
  exit 0
}

function transform_exclude_package_names() {
  IFS=',' read -r -a array <<< "$exclude"
  join="";
  for index in "${!array[@]}"
  do
    if [ "$index" -eq 0 ]; then
      join="(^| )${array[index]}( |$)"
    else
      join="${join}|(^| )${array[index]}( |$)"
    fi
  done
  exclude="${join}"
}

function handle_arguments() {
  while :; do
    case $1 in
    -h | -\? | --help)
      show_help
      exit
      ;;
    -c | --command)
      shift
      command=$1
    ;;
    -e | --exclude)
      shift
      exclude=$1
      transform_exclude_package_names
    ;;
    -m | --markdown)
      markdown=1
      ;;
    -nt | --no-test)
      no_test=1
      ;;
    -sbs | --step-by-step)
      step_by_step=1
      ;;
    *)
      break
      ;;
    esac
    shift
  done
}

function show_help() {
  printf "%s\n" "optional arguments:"
  printf "  %-25s %s\n" "-h, --help" "show this help message and exit"
  printf "  %-25s %s\n" "-c, --command" "run custom command after npm install and rollback install when given command exit code is > 0, not works with no-test option"
  printf "  %-25s %s\n" "-e, --exclude" "exclude package name seprated by a comma (e.g -e lodash,mocha)"
  printf "  %-25s %s\n" "-m, --markdown" "display updated packages in markdown table"
  printf "  %-25s %s\n" "-nt, --no-test" "does not run test command when update package"
  printf "  %-25s %s\n" "-sbs, --step-by-step" "test bump version step by step"
}

function commit_bump() {
  git add package.json package-lock.json && git commit -m "Bump ${1} from ${2} to ${3}"
}

function undo_changes() {
  git checkout package.json package-lock.json
  npm install
}

function add_updated_package_informations() {
  updated_packages+=("$1")
  old_version_packages+=("$2")
  new_version_packages+=("$3")
}

function verlte() { printf '%s\n%s' "$1" "$2" | sort -C -V; }
function verlt() { ! verlte "$2" "$1"; }

function get_versions() {
    unset versions
    read -u 7 -r -d '\n' -a versions 7< <( npm view "$1" versions --json | awk -F "[,\n]" '!/\[|beta|alpha|rc|unstable|canary|\]/ { gsub(/"/, "", $1); print $1}' | sort -V --reverse )
}

function filter_new_versions() {
    unset desc_newest_versions
    for i in "${versions[@]}"
    do
        # shellcheck disable=SC2086
        if verlt $1 $i; then
            desc_newest_versions+=("$i")
        else
            break
        fi
    done
}

function get_newest_versions() {
    get_versions "$1"
    filter_new_versions "$2"
    unset newest_versions
    read -u 8 -r -d '\n' -a newest_versions 8< <( printf '%s\n' "${desc_newest_versions[@]}" | sort -V )
}

function install_version() {
    current_version=$(npm list --depth=0 | grep " $1@" | grep -E -o "@.*$" | sed "s/@//")
    echo "Try to bump $1 from $current_version to $2"

    if [ -n "${command}" ]; then
        npm install "$1"@"$2" && eval "$command"
    elif [ ${no_test} -eq 1 ]; then
        npm install "$1"@"$2"
    else
        npm install "$1"@"$2" && npm test
    fi

    # shellcheck disable=SC2181
    if [ $? -eq 0 ]; then
        commit_bump "$1" "$current_version" "$2"
        add_updated_package_informations "$1" "$current_version" "$2"
        status=0
    else
        no_updated_packages+=("$1")
        undo_changes
        status=1
    fi
}

function bump_version() {
  if [ -z ${exclude+x} ]; then
    outdated_packages=$(npm outdated | tail -n +2)
  else
    outdated_packages=$(npm outdated | tail -n +2 | grep -Ev "$exclude")
  fi

  if [ -n "$outdated_packages" ]; then
    # shellcheck disable=SC2034
    while read -u 9 -r package actual_version col3 latest_version col4; do
      if [ ${step_by_step} -eq 0 ]; then
        install_version "${package}" "${latest_version}"
      else
        get_newest_versions "${package}" "${actual_version}"
        for version in "${newest_versions[@]}"; do
          install_version "${package}" "${version}"
          if [ ${status} -eq 1 ]; then
             break 1
          fi
        done
      fi
    done 9<<< "$outdated_packages"
  fi
}

function show_updated_packages() {
  printf "\n\n%s\n" "Updated packages :"
  printf "\n%-15s %9s    %9s\n" "Package" "Old" "New"
  printf "%.0s-" {1..38}
  printf "\n"
  for index in ${!updated_packages[*]}; do
    printf "%-15s %9s    %9s\n" "${updated_packages[$index]}" "${old_version_packages[$index]}" "${new_version_packages[$index]}"
  done
}

function show_updated_packages_in_markdown() {
  printf "\n\n%s\n" "Updated packages :"
  printf "\n%s|%s|%s\n" "Package" "Old" "New"
  printf "%s\n" "-|-|-"
  for index in ${!updated_packages[*]}; do
    printf "%s|%s|%s\n" "${updated_packages[$index]}" "${old_version_packages[$index]}" "${new_version_packages[$index]}"
  done
}

function show_no_updated_package() {
  if [ ${#no_updated_packages[@]} -gt 0 ]; then
    printf "\n%s\n" "Packages not updated :"
    # shellcheck disable=SC2048
    for package in ${no_updated_packages[*]}; do
      printf "%s %s\n" "-" "$package"
    done
  fi
}

function npm_files_exist() {
  if [[ ! -f ${PWD}/package.json || ! -f ${PWD}/package-lock.json ]]; then
    echo "No package.json in directory"
    exit 1
  fi
}

function show_result() {
  if [ ${#updated_packages[@]} -eq 0 ]; then
    printf "%s\n" "No package updated"
  else
    printf "\n"
    if [ $markdown -eq 0 ]; then
      show_updated_packages
    else
      show_updated_packages_in_markdown
    fi
    printf "\n"
    show_no_updated_package
  fi
}

handle_arguments "$@"
npm_files_exist
bump_version
show_result
